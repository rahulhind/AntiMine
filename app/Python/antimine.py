# -*- coding: utf-8 -*-
"""antiMine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/126v_iQXceMuKygpW4vJ886GeqrIzl_Fj
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import joblib

#loading the dataset to a panda dataframe
sonar_data=pd.read_csv('/content/sonardata.csv', header=None)

sonar_data.head() #shows first 5 elements of dataframe

sonar_data.describe() #deescribe statstical data of a data frame --> Mean, STD, Min,Max, etc

sonar_data[60].value_counts() # It show different type of values count

sonar_data.groupby(60).mean()

#Seperating data and Labels / Features and Target
X=sonar_data.drop(columns=60,axis=1)
Y=sonar_data[60]

"""Training and Test Data Splitting

"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1) #stratify splits data in equal number of rocks and mine in training data
#random_state is a style of splitting data
#test_size if a percentange of test data 0.1 means 10%

"""Model Training-> Logistic Regression
Logistic regression is good of binary classification model
"""

modell=LogisticRegression()

modell.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy <70% is quite good
X_train_predction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_predction,Y_train)

print(training_data_accuracy) #83% of accuracy getting on training fata

X_test_predction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_predction,Y_test)

print(test_data_accuracy) #76% on testing data quite good

"""Making a predective System"""

#input_data=(0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032)
input_data=(0.0116,0.0179,0.0449,0.1096,0.1913,0.0924,0.0761,0.1092,0.0757,0.1006,0.2500,0.3988,0.3809,0.4753,0.6165,0.6464,0.8024,0.9208,0.9832,0.9634,0.8646,0.8325,0.8276,0.8007,0.6102,0.4853,0.4355,0.4307,0.4399,0.3833,0.3032,0.3035,0.3197,0.2292,0.2131,0.2347,0.3201,0.4455,0.3655,0.2715,0.1747,0.1781,0.2199,0.1056,0.0573,0.0307,0.0237,0.0470,0.0102,0.0057,0.0031,0.0163,0.0099,0.0084,0.0270,0.0277,0.0097,0.0054,0.0148,0.0092)
input_arr=np.asarray(input_data)

#reshape the np data as we are predicting for one instance
array_reshaped=input_arr.reshape(1,-1)
prediction=modell.predict(array_reshaped)
print(prediction)

joblib.dump(model, 'antiMine.pkl') #to save Model

loaded_model = joblib.load('antiMine.pkl')

input_data2=np.array([0.0116,0.0179,0.0449,0.1096,0.1913,0.0924,0.0761,0.1092,0.0757,0.1006,0.2500,0.3988,0.3809,0.4753,0.6165,0.6464,0.8024,0.9208,0.9832,0.9634,0.8646,0.8325,0.8276,0.8007,0.6102,0.4853,0.4355,0.4307,0.4399,0.3833,0.3032,0.3035,0.3197,0.2292,0.2131,0.2347,0.3201,0.4455,0.3655,0.2715,0.1747,0.1781,0.2199,0.1056,0.0573,0.0307,0.0237,0.0470,0.0102,0.0057,0.0031,0.0163,0.0099,0.0084,0.0270,0.0277,0.0097,0.0054,0.0148,0.0092])
input_data_2d = input_data2.reshape(1, -1) #to reshape 1D array to 2D array because load_model.predict() expects 2d array
predictions = loaded_model.predict(input_data_2d)

print(predictions)